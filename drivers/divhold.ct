/*
 * Copyright 2010-2011 by Dominic Clifton <me@dominicclifton.name>
 *
 * This file is part of FreeWPC.
 *
 * FreeWPC is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * FreeWPC is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with FreeWPC; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

/*
 * Diverter with separate hold power driver
 *
 * This is an implementation of a diverter which has separate electrical circuits
 * for pulse and hold power.
 *
 * An example of which can be found on Corvette.
 *
 * On Corvette the fliptonic II's spare Upper Right Flipper circuits are used to
 * driver a diverter.  The solenoid, unlike the flippers on the game, does NOT have
 * an End-Of-Stroke (EOS) switch. 
 *
 * The code to control a diverter flipper depends on two parameters, which are simply
 * the solenoid numbers for the power and holding coils
 */

@@class divhold

/* The solenoid that is used for full power*/
@@parameter power_sol
/* The solenoid that is used for hold power */
@@parameter hold_sol
/* Set to 1 if the solenoids are fliptronic powered */
@@parameter mode
/* Durations of the pulse for the full power solenoid (in ms) - must be divisible by the value used by the schedule_ms parameter */
@@parameter power_pulse_ms
/* Schedule for the driver, in ms, go as high as you can, try 32 to start with */
@@parameter schedule_ms


@@
@@file @self.sched
@@

# note, the template is hard coded to use a frequency value of 8, the value below must match
# See @SELF_DIVERTER_SCHED
!@self_service @schedule_ms 40c

@@
@@file @self.h
@@

#include <freewpc.h>

#define @SELF_MODE @mode // 1 == fliptronics, 0 == normal

// Note: The driver doesn't care about any switches.
/* Schedule this driver every @schedule_ms ms. */
#define @SELF_DIVERTER_SCHED @schedule_ms // see the 'schedule_ms' driver parameter

/* Length of time for the initial power pulse */
#define @SELF_POWER_PULSE @power_pulse_ms // must be divisible exactly by @SELF_DIVERTER_SCHED (above), see the 'power_pulse_ms' driver parameter 
#define @SELF_POWER_TICKS (@SELF_POWER_PULSE / @SELF_DIVERTER_SCHED)

extern __fastram__ S8 @self_timer;


void @self_start (void);
void @self_stop (void);

#if (@SELF_MODE > 0)

extern U8 fliptronic_powered_coil_outputs;
#define diverter_sol_bitmask(id) (1 << ((id & (CHAR_BIT - 1))))

#define diverter_sol_contribute(id, bits, enable) \
	{ if (enable) { bits |= diverter_sol_bitmask(id); } else { bits &= ~(diverter_sol_bitmask(id)); } };

#define diverter_sol_enable(id, bits) \
	{ bits |= diverter_sol_bitmask(id); };

#define diverter_sol_disable(id, bits) \
 	{ bits &= ~(diverter_sol_bitmask(id)); };
#endif

extern inline void @self_service (void)
{
#if (@SELF_MODE > 0)
	register U8 out __areg__ = fliptronic_powered_coil_outputs;
#endif
	
	if (@self_timer == 0) {
#if (@SELF_MODE > 0)	
		diverter_sol_disable(@power_sol, out);
		diverter_sol_disable(@hold_sol, out);
#else
		sol_disable (@power_sol | @hold_sol);
#endif
	} 
	
	if (@self_timer > 0) {
		/* Allow the high power pulse to keep running */
#if (@SELF_MODE > 0)
		diverter_sol_enable(@power_sol, out);
		diverter_sol_enable(@hold_sol, out);
#else
		sol_enable (@power_sol | @hold_sol);
#endif
		
		if (--@self_timer == 0)
		{
			@self_timer = -1;
			/* The high power pulse has expired.  Switch to hold power */			
			//sol_disable (@power_sol);
			diverter_sol_disable(@power_sol, out);			
		}
	}
	
	if (@self_timer < 0) {
		/* Allow the hold power to keep running */
#if (@SELF_MODE > 0)
		diverter_sol_enable(@hold_sol, out);
#else
		//sol_enable (@hold_sol);
#endif
		// We could add a timeout here so that we don't stay on hold power forever but that 
		// is better left to the game logic, e.g. via timed modes, switches etc.
		// On the Willimans Corvette original ROM code the diverter stays on for a while, and
		// then turns off if the ball hasn't been up the ramp.  Then if a ball should go up
		// the ramp while the diverter is off an opto is triggered near the bottom of the
		// ramp which is then used to determine if the diverter should be re-opened.
	}
	
#if (@SELF_MODE > 0)	
	/* Write the final output to the hardware */
	fliptronic_powered_coil_outputs = out;
#endif	
}

@@
@@file @self.c
@@

#include <freewpc.h>
#include "@self.h"


/** Each diverter has it's own timer variable.
 *
 * < 0 - use hold power only
 * > 0 - full power to both hold and power circuits
 *   0 - no power
 */
__fastram__ S8 @self_timer;

/**
 * The user API to start a diverter.
 */
void @self_start (void) {
	disable_interrupts ();
	
	/* Start the high power pulse */
	@self_timer = @SELF_POWER_TICKS;	
	
	enable_interrupts ();
}

/**
 * The user API to stop a diverter.
 */
void @self_stop (void) {
	disable_interrupts ();
	
	@self_timer = 0;
	
	enable_interrupts ();
}

CALLSET_ENTRY (@self, init)
{
	@self_timer = 0;
	dbprintf("Diverter power: '@power_sol' (%d)\n", @power_sol);
	dbprintf("Diverter hold: '@hold_sol' (%d)\n", @hold_sol);
#if (@SELF_MODE > 0)
	dbprintf("Diverter mode: FLIPTRONICS\n");
#else
	dbprintf("Diverter mode: NORMAL\n");
#endif	
}

CALLSET_ENTRY (@self, tilt, stop_game)
{
	@self_stop ();
}

/* vim: set filetype=c: */


@@
@@file @self_test.c
@@

/*
 * Copyright 2010 by Dominic Clifton <me@dominicclifton.name>
 *
 * This file is part of FreeWPC.
 *
 * FreeWPC is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * FreeWPC is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with FreeWPC; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

/* @self test:
 * - Enable/Disable solenoids.
 * - Calibrate the left right and center positions.
 * - Shake engine.
 */

#include <freewpc.h>
#include <window.h>
#include <test.h>
#include "@self.h"

// FIXME - font_render_string_right vertically offsets the text by 1 pixel (downwards)
// When this is removed removed all references to FR_WORKAROUND
#define FRSR_WORKAROUND 1

enum {
	FIRST_TEST = 0,
	START = FIRST_TEST,
	STOP,
	LAST_TEST = STOP
} @self_test_command;

char *@self_test_short_names[] = {
	"START",
	"STOP"
};


extern __fastram__ S8 @self_timer;
#if (@SELF_MODE > 0)
extern __fastram__ U8 fliptronic_powered_coil_outputs;
#endif

void @self_test_init (void)
{
	@self_test_command = START;
}

void @self_draw_test_title(void) {
	font_render_string_center (&font_mono5, 64, 2, "DIVERTER TEST");
	dmd_draw_horiz_line ((U16 *)dmd_low_buffer, 5);
}

#define LINE_1_Y 7
#define LINE_2_Y 13
#define LINE_3_Y 19

void @self_test_draw (void)
{
	dmd_alloc_low_clean ();

	@self_draw_test_title();

	// 21 characters wide max when using 5 point font.

	if (@self_timer < 0) {
		sprintf ("HOLD");
	} else if (@self_timer > 0) {
		sprintf ("FULL");
	} else {
		sprintf ("FLOAT");
	}
	font_render_string_center (&font_var5, 64, LINE_1_Y + 2, sprintf_buffer);

	sprintf ("TIMER:%d\n", @self_timer);
	font_render_string_center (&font_var5, 64, LINE_2_Y + 2, sprintf_buffer);

	// XXX for debugging
#if (@SELF_MODE > 0)		
	sprintf ("FPCO:%d\n", fliptronic_powered_coil_outputs);
	font_render_string_center (&font_var5, 64, LINE_3_Y + 2, sprintf_buffer);
#endif

	dmd_draw_horiz_line ((U16 *)dmd_low_buffer, 25);

	sprintf(@self_test_short_names[@self_test_command]);
	font_render_string_left (&font_mono5, 0, 27, sprintf_buffer);



	dmd_show_low ();
}


void @self_test_thread (void)
{
	for (;;)
	{

		task_sleep (TIME_100MS);

		@self_test_draw ();
	}
}


void @self_test_up (void)
{
	if (@self_test_command < LAST_TEST)
		@self_test_command++;
}


void @self_test_down (void)
{
	if (@self_test_command > FIRST_TEST)
		@self_test_command--;
}

void @self_test_escape (void) {

	// stop everything
	@self_stop();

	window_pop();
}

void @self_test_enter (void)
{
	sound_send (SND_TEST_ENTER);
  	switch (@self_test_command)
  	{
  		case START:
			dbprintf ("@self_test_enter: starting 'open'\n");
			@self_start();
			@self_test_command = STOP;
  		break;
  		case STOP:
			dbprintf ("@self_test_enter: starting 'close'\n");
			@self_stop();
			@self_test_command = START;
  		break;
  	}

}

struct window_ops @self_test_window = {
	DEFAULT_WINDOW,
	.init = @self_test_init,
	.draw = @self_test_draw,
	.up = @self_test_up,
	.down = @self_test_down,
	.enter = @self_test_enter,
	.escape = @self_test_escape,
	.thread = @self_test_thread,
};


struct menu @self_test_item = {
	.name = "@SELF TEST", // needs @SELF for uppercase version of 'self' as test menu font doesn't have lower-case letters.
	.flags = M_ITEM,
	.var = { .subwindow = { &@self_test_window, NULL } },
};
